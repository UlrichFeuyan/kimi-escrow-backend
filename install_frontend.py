#!/usr/bin/env python3
"""
Script d'installation du frontend Kimi Escrow
Int√®gre automatiquement le frontend Django dans le projet existant
"""

import os
import sys
import shutil
from pathlib import Path

def print_step(step, message):
    """Affiche une √©tape de l'installation"""
    print(f"\nüîß √âtape {step}: {message}")
    print("=" * 50)

def update_settings_py():
    """Met √† jour le fichier settings.py pour int√©grer le frontend"""
    print_step(1, "Mise √† jour de settings.py")
    
    settings_path = Path("kimi_escrow/settings.py")
    
    if not settings_path.exists():
        print("‚ùå Fichier settings.py non trouv√©!")
        return False
    
    # Lire le contenu actuel
    with open(settings_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier si les modifications sont d√©j√† pr√©sentes
    if 'STATICFILES_DIRS' in content and 'templates' in content:
        print("‚úÖ Settings.py d√©j√† configur√© pour le frontend")
        return True
    
    # Ajouter la configuration des templates et fichiers statiques
    frontend_config = '''
# ===== CONFIGURATION FRONTEND ===== #

# Configuration des templates
TEMPLATES[0]['DIRS'] = [BASE_DIR / 'templates']

# Configuration des fichiers statiques
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Messages framework pour les alertes
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

# Configuration API pour le frontend
API_BASE_URL = 'http://localhost:8000/api'

# Sessions pour le frontend
SESSION_COOKIE_AGE = 86400  # 24 heures
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
'''
    
    # Ajouter √† la fin du fichier
    with open(settings_path, 'a', encoding='utf-8') as f:
        f.write(frontend_config)
    
    print("‚úÖ Settings.py mis √† jour avec la configuration frontend")
    return True

def update_main_urls():
    """Met √† jour le fichier URLs principal pour inclure les routes frontend"""
    print_step(2, "Mise √† jour des URLs principales")
    
    main_urls_path = Path("kimi_escrow/urls.py")
    
    if not main_urls_path.exists():
        print("‚ùå Fichier urls.py principal non trouv√©!")
        return False
    
    # Lire le contenu actuel
    with open(main_urls_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier si les routes frontend sont d√©j√† ajout√©es
    if 'frontend_urls' in content:
        print("‚úÖ URLs frontend d√©j√† configur√©es")
        return True
    
    # Trouver les urlpatterns et ajouter les routes frontend
    if 'urlpatterns = [' in content:
        # Ajouter l'import
        if 'from django.urls import path, include' not in content:
            content = content.replace(
                'from django.urls import path',
                'from django.urls import path, include'
            )
        
        # Ajouter les routes frontend avant les routes API
        content = content.replace(
            'urlpatterns = [',
            '''urlpatterns = [
    # Frontend routes (avant API pour priorit√©)
    path('', include('frontend_urls')),
'''
        )
        
        with open(main_urls_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ URLs frontend ajout√©es au fichier principal")
        return True
    else:
        print("‚ùå Structure urlpatterns non trouv√©e dans urls.py")
        return False

def create_frontend_app():
    """Cr√©e un pseudo-app Django pour le frontend"""
    print_step(3, "Configuration de l'application frontend")
    
    # Cr√©er le dossier frontend
    frontend_dir = Path("frontend")
    frontend_dir.mkdir(exist_ok=True)
    
    # Cr√©er __init__.py
    (frontend_dir / "__init__.py").touch()
    
    # Cr√©er apps.py
    apps_content = '''from django.apps import AppConfig

class FrontendConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'frontend'
    verbose_name = 'Frontend Kimi Escrow'
'''
    
    with open(frontend_dir / "apps.py", 'w', encoding='utf-8') as f:
        f.write(apps_content)
    
    print("‚úÖ Application frontend configur√©e")
    return True

def copy_frontend_files():
    """Copie les fichiers frontend dans leur structure finale"""
    print_step(4, "Organisation des fichiers frontend")
    
    files_to_copy = [
        ("frontend_forms.py", "frontend/forms.py"),
        ("frontend_views.py", "frontend/views.py"),
        ("frontend_urls.py", "frontend/urls.py"),
    ]
    
    for source, dest in files_to_copy:
        if Path(source).exists():
            # Cr√©er le dossier de destination si n√©cessaire
            Path(dest).parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(source, dest)
            print(f"‚úÖ {source} ‚Üí {dest}")
        else:
            print(f"‚ö†Ô∏è  {source} non trouv√©")
    
    # V√©rifier que les dossiers templates et static existent
    for folder in ["templates", "static"]:
        if Path(folder).exists():
            print(f"‚úÖ Dossier {folder} trouv√©")
        else:
            print(f"‚ùå Dossier {folder} manquant!")
    
    return True

def update_installed_apps():
    """Ajoute l'app frontend aux INSTALLED_APPS"""
    print_step(5, "Ajout de l'app frontend")
    
    settings_path = Path("kimi_escrow/settings.py")
    
    with open(settings_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    if "'frontend'," in content or '"frontend",' in content:
        print("‚úÖ App frontend d√©j√† dans INSTALLED_APPS")
        return True
    
    # Trouver INSTALLED_APPS et ajouter frontend
    if 'INSTALLED_APPS = [' in content:
        content = content.replace(
            'INSTALLED_APPS = [',
            '''INSTALLED_APPS = [
    'frontend',  # Frontend Django templates'''
        )
        
        with open(settings_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ App frontend ajout√©e aux INSTALLED_APPS")
        return True
    else:
        print("‚ùå INSTALLED_APPS non trouv√© dans settings.py")
        return False

def create_superuser_script():
    """Cr√©e un script pour cr√©er un superutilisateur avec profil admin"""
    print_step(6, "Cr√©ation du script superutilisateur")
    
    script_content = '''#!/usr/bin/env python3
"""
Script pour cr√©er un superutilisateur admin pour le frontend
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kimi_escrow.settings')
django.setup()

from django.contrib.auth import get_user_model
from users.models import UserProfile

User = get_user_model()

def create_admin_user():
    print("Cr√©ation d'un utilisateur administrateur...")
    
    phone_number = input("Num√©ro de t√©l√©phone (+237XXXXXXXXX): ")
    if not phone_number.startswith('+237'):
        phone_number = '+237' + phone_number.replace('+', '').replace('237', '')
    
    first_name = input("Pr√©nom: ")
    last_name = input("Nom: ")
    password = input("Mot de passe: ")
    
    try:
        # Cr√©er l'utilisateur
        user = User.objects.create_user(
            phone_number=phone_number,
            password=password,
            first_name=first_name,
            last_name=last_name,
            is_staff=True,
            is_superuser=True,
            is_phone_verified=True
        )
        
        # Cr√©er le profil admin
        profile, created = UserProfile.objects.get_or_create(
            user=user,
            defaults={
                'role': 'ADMIN',
                'kyc_status': 'VERIFIED'
            }
        )
        
        print(f"‚úÖ Utilisateur admin cr√©√©: {user.phone_number}")
        print(f"Nom: {user.get_full_name()}")
        print(f"R√¥le: {profile.role}")
        print("üåê Vous pouvez maintenant acc√©der au frontend!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")

if __name__ == '__main__':
    create_admin_user()
'''
    
    with open("create_admin.py", 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # Rendre ex√©cutable
    os.chmod("create_admin.py", 0o755)
    
    print("‚úÖ Script create_admin.py cr√©√©")
    return True

def create_frontend_management_command():
    """Cr√©e une commande de management pour initialiser le frontend"""
    print_step(7, "Cr√©ation de la commande de management frontend")
    
    # Cr√©er la structure management/commands
    mgmt_dir = Path("frontend/management")
    mgmt_dir.mkdir(parents=True, exist_ok=True)
    
    # __init__.py files
    (mgmt_dir / "__init__.py").touch()
    
    commands_dir = mgmt_dir / "commands"
    commands_dir.mkdir(exist_ok=True)
    (commands_dir / "__init__.py").touch()
    
    # Commande init_frontend
    command_content = '''from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from users.models import UserProfile

User = get_user_model()

class Command(BaseCommand):
    help = 'Initialise le frontend avec des donn√©es de d√©monstration'
    
    def handle(self, *args, **options):
        self.stdout.write('üöÄ Initialisation du frontend Kimi Escrow...')
        
        # Cr√©er des utilisateurs de test si pas en production
        if not User.objects.filter(phone_number='+237612345678').exists():
            # Acheteur de test
            buyer = User.objects.create_user(
                phone_number='+237612345678',
                password='test123',
                first_name='Jean',
                last_name='Acheteur',
                is_phone_verified=True
            )
            UserProfile.objects.create(
                user=buyer,
                role='BUYER',
                kyc_status='VERIFIED'
            )
            
            # Vendeur de test
            seller = User.objects.create_user(
                phone_number='+237698765432',
                password='test123',
                first_name='Marie',
                last_name='Vendeur',
                is_phone_verified=True
            )
            UserProfile.objects.create(
                user=seller,
                role='SELLER',
                kyc_status='VERIFIED'
            )
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Utilisateurs de test cr√©√©s')
            )
        
        self.stdout.write(
            self.style.SUCCESS('üéâ Frontend initialis√© avec succ√®s!')
        )
'''
    
    with open(commands_dir / "init_frontend.py", 'w', encoding='utf-8') as f:
        f.write(command_content)
    
    print("‚úÖ Commande de management init_frontend cr√©√©e")
    return True

def show_next_steps():
    """Affiche les prochaines √©tapes apr√®s l'installation"""
    print_step(8, "Installation termin√©e!")
    
    next_steps = """
üéâ FRONTEND KIMI ESCROW INSTALL√â AVEC SUCC√àS!

üìã Prochaines √©tapes:

1. üîÑ Appliquer les migrations:
   python manage.py migrate

2. üì¶ Collecter les fichiers statiques:
   python manage.py collectstatic

3. üë§ Cr√©er un utilisateur admin:
   python create_admin.py

4. üß™ Initialiser avec des donn√©es de test:
   python manage.py init_frontend

5. üöÄ Lancer le serveur:
   python manage.py runserver

6. üåê Acc√©der au frontend:
   http://localhost:8000/

üìö Documentation:
   Consultez FRONTEND_README.md pour plus de d√©tails

üéØ Fonctionnalit√©s disponibles:
   ‚úÖ Authentification compl√®te avec RBAC
   ‚úÖ Dashboards par r√¥le (BUYER, SELLER, ARBITRE, ADMIN)
   ‚úÖ Gestion des transactions escrow
   ‚úÖ Paiements Mobile Money
   ‚úÖ Syst√®me de litiges
   ‚úÖ Interface d'administration
   ‚úÖ Design responsive Bootstrap 5
   ‚úÖ Int√©gration AJAX avec API DRF

‚ö†Ô∏è  Important:
   - V√©rifiez que tous les endpoints DRF sont fonctionnels
   - Configurez les cl√©s API Mobile Money
   - Testez les permissions et roles
   - Personnalisez les styles selon votre charte graphique

üÜò Support:
   En cas de probl√®me, consultez le fichier FRONTEND_README.md
   ou contactez l'√©quipe de d√©veloppement.
"""
    
    print(next_steps)

def main():
    """Fonction principale d'installation"""
    print("üé® INSTALLATION DU FRONTEND KIMI ESCROW")
    print("======================================")
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if not Path("manage.py").exists():
        print("‚ùå Erreur: Veuillez ex√©cuter ce script depuis la racine du projet Django")
        sys.exit(1)
    
    # V√©rifier les dossiers n√©cessaires
    required_dirs = ["templates", "static"]
    missing_dirs = [d for d in required_dirs if not Path(d).exists()]
    
    if missing_dirs:
        print(f"‚ùå Erreur: Dossiers manquants: {', '.join(missing_dirs)}")
        print("Assurez-vous que tous les fichiers frontend ont √©t√© copi√©s.")
        sys.exit(1)
    
    # Ex√©cuter les √©tapes d'installation
    steps = [
        update_settings_py,
        update_main_urls,
        create_frontend_app,
        copy_frontend_files,
        update_installed_apps,
        create_superuser_script,
        create_frontend_management_command,
        show_next_steps
    ]
    
    for step in steps:
        try:
            if not step():
                print(f"‚ùå √âchec de l'√©tape: {step.__name__}")
                sys.exit(1)
        except Exception as e:
            print(f"‚ùå Erreur dans {step.__name__}: {e}")
            sys.exit(1)
    
    print("\nüéâ Installation termin√©e avec succ√®s!")

if __name__ == "__main__":
    main()
