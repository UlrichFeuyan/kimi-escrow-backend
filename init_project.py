#!/usr/bin/env python
"""
Script d'initialisation du projet Kimi Escrow
Ce script configure automatiquement le projet avec des donn√©es de base
"""

import os
import sys
import django
from django.core.management import execute_from_command_line

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kimi_escrow.settings')
django.setup()

from django.contrib.auth import get_user_model
from core.models import GlobalSettings
from payments.models import PaymentMethod

User = get_user_model()


def create_default_settings():
    """Cr√©er les param√®tres par d√©faut"""
    settings_data = [
        ('ESCROW_COMMISSION_RATE', '0.025', 'Taux de commission escrow (2.5%)'),
        ('MINIMUM_ESCROW_AMOUNT', '1000', 'Montant minimum pour une transaction escrow (XAF)'),
        ('MAXIMUM_ESCROW_AMOUNT', '10000000', 'Montant maximum pour une transaction escrow (XAF)'),
        ('DISPUTE_TIMEOUT_DAYS', '7', 'D√©lai pour cr√©er un litige (jours)'),
        ('AUTO_RELEASE_DAYS', '14', 'D√©lai de lib√©ration automatique des fonds (jours)'),
        ('KYC_REQUIRED', 'True', 'KYC obligatoire pour les transactions'),
        ('MAINTENANCE_MODE', 'False', 'Mode maintenance de l\'application'),
        ('SMS_ENABLED', 'True', 'Notifications SMS activ√©es'),
        ('EMAIL_ENABLED', 'True', 'Notifications email activ√©es'),
        ('MAX_UPLOAD_SIZE', '10485760', 'Taille maximum des fichiers upload√©s (bytes)'),
    ]
    
    created_count = 0
    for key, value, description in settings_data:
        setting, created = GlobalSettings.objects.get_or_create(
            key=key,
            defaults={'value': value, 'description': description}
        )
        if created:
            print(f"‚úì Param√®tre cr√©√©: {key} = {value}")
            created_count += 1
        else:
            print(f"- Param√®tre existe d√©j√†: {key} = {setting.value}")
    
    print(f"\n{created_count} nouveaux param√®tres cr√©√©s.")


def create_payment_methods():
    """Cr√©er les m√©thodes de paiement par d√©faut"""
    payment_methods_data = [
        {
            'name': 'MTN Mobile Money',
            'provider': 'MTN_MOMO',
            'status': 'ACTIVE',
            'supports_collection': True,
            'supports_disbursement': True,
            'min_amount': 100,
            'max_amount': 1000000,
            'transaction_fee': 25,
            'description': 'Paiement via MTN Mobile Money Cameroun'
        },
        {
            'name': 'Orange Money',
            'provider': 'ORANGE_MONEY',
            'status': 'ACTIVE',
            'supports_collection': True,
            'supports_disbursement': True,
            'min_amount': 100,
            'max_amount': 1000000,
            'transaction_fee': 25,
            'description': 'Paiement via Orange Money Cameroun'
        },
        {
            'name': 'Virement Bancaire',
            'provider': 'BANK_TRANSFER',
            'status': 'ACTIVE',
            'supports_collection': True,
            'supports_disbursement': True,
            'min_amount': 1000,
            'max_amount': 50000000,
            'transaction_fee': 150,
            'description': 'Virement bancaire classique'
        },
        {
            'name': 'Compte S√©questre',
            'provider': 'ESCROW_BANK',
            'status': 'ACTIVE',
            'supports_collection': False,
            'supports_disbursement': True,
            'min_amount': 0,
            'max_amount': 999999999,
            'transaction_fee': 0,
            'description': 'Compte bancaire s√©questre pour la s√©curisation des fonds'
        },
    ]
    
    created_count = 0
    for method_data in payment_methods_data:
        method, created = PaymentMethod.objects.get_or_create(
            provider=method_data['provider'],
            defaults=method_data
        )
        if created:
            print(f"‚úì M√©thode de paiement cr√©√©e: {method.name}")
            created_count += 1
        else:
            print(f"- M√©thode existe d√©j√†: {method.name}")
    
    print(f"\n{created_count} nouvelles m√©thodes de paiement cr√©√©es.")


def create_test_users():
    """Cr√©er des utilisateurs de test"""
    test_users_data = [
        {
            'phone_number': '+237612345678',
            'first_name': 'John',
            'last_name': 'Buyer',
            'role': 'BUYER',
            'kyc_status': 'VERIFIED',
            'is_phone_verified': True,
        },
        {
            'phone_number': '+237698765432',
            'first_name': 'Jane',
            'last_name': 'Seller',
            'role': 'SELLER',
            'kyc_status': 'VERIFIED',
            'is_phone_verified': True,
        },
        {
            'phone_number': '+237655555555',
            'first_name': 'Alex',
            'last_name': 'Arbitre',
            'role': 'ARBITRE',
            'kyc_status': 'VERIFIED',
            'is_phone_verified': True,
        },
        {
            'phone_number': '+237600000000',
            'first_name': 'Admin',
            'last_name': 'System',
            'role': 'ADMIN',
            'kyc_status': 'VERIFIED',
            'is_phone_verified': True,
            'is_staff': True,
            'is_superuser': True,
        },
    ]
    
    created_count = 0
    password = 'TestPassword123!'
    
    for user_data in test_users_data:
        phone = user_data['phone_number']
        if not User.objects.filter(phone_number=phone).exists():
            user = User.objects.create_user(
                password=password,
                **user_data
            )
            print(f"‚úì Utilisateur cr√©√©: {user.get_full_name()} ({phone})")
            created_count += 1
        else:
            print(f"- Utilisateur existe d√©j√†: {phone}")
    
    print(f"\n{created_count} nouveaux utilisateurs de test cr√©√©s.")
    print(f"Mot de passe par d√©faut: {password}")


def run_migrations():
    """Ex√©cuter les migrations"""
    print("üîÑ Ex√©cution des migrations...")
    execute_from_command_line(['manage.py', 'migrate'])
    print("‚úì Migrations termin√©es.")


def collect_static():
    """Collecter les fichiers statiques"""
    print("üîÑ Collecte des fichiers statiques...")
    execute_from_command_line(['manage.py', 'collectstatic', '--noinput'])
    print("‚úì Fichiers statiques collect√©s.")


def main():
    """Fonction principale d'initialisation"""
    print("üöÄ Initialisation du projet Kimi Escrow Backend")
    print("=" * 50)
    
    try:
        # 1. Migrations
        run_migrations()
        print()
        
        # 2. Param√®tres par d√©faut
        print("üìã Cr√©ation des param√®tres par d√©faut...")
        create_default_settings()
        print()
        
        # 3. M√©thodes de paiement
        print("üí≥ Cr√©ation des m√©thodes de paiement...")
        create_payment_methods()
        print()
        
        # 4. Utilisateurs de test (seulement en d√©veloppement)
        if os.getenv('DEBUG', 'True').lower() == 'true':
            print("üë• Cr√©ation des utilisateurs de test...")
            create_test_users()
            print()
        
        # 5. Fichiers statiques
        collect_static()
        print()
        
        print("üéâ Initialisation termin√©e avec succ√®s!")
        print()
        print("üìù Prochaines √©tapes:")
        print("1. Configurer vos variables d'environnement dans .env")
        print("2. D√©marrer le serveur: python manage.py runserver")
        print("3. D√©marrer Celery: celery -A kimi_escrow worker --loglevel=info")
        print("4. Acc√©der √† l'admin: http://localhost:8000/admin/")
        print("5. Tester l'API: http://localhost:8000/api/core/health/")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
