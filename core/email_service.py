"""
Service d'envoi d'emails professionnel pour Kimi Escrow
"""

from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
from django.conf import settings
from django.utils import timezone
import logging

logger = logging.getLogger(__name__)


class EmailService:
    """Service centralis√© pour l'envoi d'emails"""
    
    @staticmethod
    def send_password_reset_email(user, reset_code):
        """
        Envoie un email de r√©initialisation de mot de passe avec template HTML
        """
        try:
            # Contexte pour le template
            context = {
                'user': user,
                'reset_code': reset_code,
                'current_year': timezone.now().year,
                'site_name': 'Kimi Escrow',
                'site_url': getattr(settings, 'SITE_URL', 'https://kimi-escrow.com'),
                'support_email': getattr(settings, 'SUPPORT_EMAIL', 'support@kimi-escrow.com'),
            }
            
            # Rendu du template HTML
            html_content = render_to_string('emails/password_reset.html', context)
            
            # Version texte de l'email (fallback)
            text_content = f"""
Bonjour {user.get_full_name()},

Vous avez demand√© la r√©initialisation de votre mot de passe sur Kimi Escrow.

Votre code de r√©initialisation est : {reset_code}

Ce code expire dans 15 minutes pour votre s√©curit√©.

Si vous n'avez pas demand√© cette r√©initialisation, ignorez cet email.

Cordialement,
L'√©quipe Kimi Escrow

---
Cet email a √©t√© envoy√© depuis une adresse automatis√©e.
¬© {timezone.now().year} Kimi Escrow. Tous droits r√©serv√©s.
            """.strip()
            
            # Cr√©ation de l'email
            subject = "üîê R√©initialisation de votre mot de passe - Kimi Escrow"
            from_email = getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@kimi-escrow.com')
            to_email = [user.email]
            
            # Email avec contenu HTML et texte
            email = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=from_email,
                to=to_email,
            )
            
            # Ajout du contenu HTML
            email.attach_alternative(html_content, "text/html")
            
            # Envoi de l'email
            result = email.send(fail_silently=False)
            
            if result:
                logger.info(f"Email de r√©initialisation envoy√© √† {user.email}")
                return True
            else:
                logger.error(f"√âchec envoi email de r√©initialisation √† {user.email}")
                return False
                
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi email √† {user.email}: {e}")
            return False
    
    @staticmethod
    def send_password_changed_notification(user):
        """
        Envoie une notification de changement de mot de passe r√©ussi
        """
        try:
            context = {
                'user': user,
                'current_year': timezone.now().year,
                'site_name': 'Kimi Escrow',
                'timestamp': timezone.now(),
            }
            
            # Version texte simple pour la notification
            text_content = f"""
Bonjour {user.get_full_name()},

Votre mot de passe a √©t√© modifi√© avec succ√®s le {timezone.now().strftime('%d/%m/%Y √† %H:%M')}.

Si vous n'√™tes pas √† l'origine de cette modification, contactez imm√©diatement notre support.

Cordialement,
L'√©quipe Kimi Escrow
            """.strip()
            
            subject = "‚úÖ Mot de passe modifi√© - Kimi Escrow"
            from_email = getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@kimi-escrow.com')
            to_email = [user.email]
            
            email = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=from_email,
                to=to_email,
            )
            
            result = email.send(fail_silently=False)
            
            if result:
                logger.info(f"Notification de changement de mot de passe envoy√©e √† {user.email}")
                return True
            else:
                logger.error(f"√âchec envoi notification √† {user.email}")
                return False
                
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi notification √† {user.email}: {e}")
            return False
    
    @staticmethod
    def send_welcome_email(user):
        """
        Envoie un email de bienvenue apr√®s inscription
        """
        try:
            text_content = f"""
Bienvenue sur Kimi Escrow !

Bonjour {user.get_full_name()},

F√©licitations ! Votre compte a √©t√© cr√©√© avec succ√®s sur Kimi Escrow.

Prochaines √©tapes :
1. V√©rifiez votre num√©ro de t√©l√©phone
2. Compl√©tez votre profil
3. Soumettez vos documents KYC pour des transactions s√©curis√©es

Notre √©quipe est l√† pour vous accompagner 24h/7j.

Cordialement,
L'√©quipe Kimi Escrow
            """.strip()
            
            subject = "üéâ Bienvenue sur Kimi Escrow !"
            from_email = getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@kimi-escrow.com')
            to_email = [user.email]
            
            email = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=from_email,
                to=to_email,
            )
            
            result = email.send(fail_silently=False)
            
            if result:
                logger.info(f"Email de bienvenue envoy√© √† {user.email}")
                return True
            else:
                logger.error(f"√âchec envoi email de bienvenue √† {user.email}")
                return False
                
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi email de bienvenue √† {user.email}: {e}")
            return False


# Fonction utilitaire pour r√©trocompatibilit√©
def send_notification_email(to_email, subject, message, **kwargs):
    """
    Fonction utilitaire pour l'envoi d'emails simples (r√©trocompatibilit√©)
    """
    try:
        from_email = getattr(settings, 'DEFAULT_FROM_EMAIL', 'noreply@kimi-escrow.com')
        
        email = EmailMultiAlternatives(
            subject=subject,
            body=message,
            from_email=from_email,
            to=[to_email],
        )
        
        result = email.send(fail_silently=False)
        
        if result:
            logger.info(f"Email envoy√© √† {to_email}: {subject}")
            return True
        else:
            logger.error(f"√âchec envoi email √† {to_email}")
            return False
            
    except Exception as e:
        logger.error(f"Erreur envoi email √† {to_email}: {e}")
        return False
